---

### Copy necessary files for a container service
- name: "{{ service.name }}: Copy static files"
  ansible.builtin.copy:
    src: "container_service_files/{{ service.name }}/{{ item.name }}"
    dest: "{{ container_service_basedir }}/{{ service.name }}/{{ item.name }}"
    mode: "{{ item.mode | default(default_file_mode) }}"
    owner: "{{ item.owner | default(operator_user) }}"
    group: "{{ item.group | default(operator_group) }}"
    validate: "{{ item.validate | default(omit) }}"
  loop: "{{ service.files }}"
  register: "changed_container"
  notify: [ "Stop Service", "Start Service" ]
  when: "service.files is defined"

- name: "{{ service.name }}: Create target directories for each templated file."
  ansible.builtin.file:
    path: "{{ container_services_basedir }}/{{ service.name }}/{{ item.name | dirname }}"
    state: "directory"
    recurse: true
    owner: "{{ item.owner | default(operator_user) }}"
    group: "{{ item.group | default(operator_group) }}"
    validate: "{{ item.validate | default(omit) }}"
  loop: "{{ service.templates }}"
  register: "changed_container"
  notify: [ "Stop Service", "Start Service" ]
  when: "service.templates is defined"

- name: "{{ service.name }}: Copy templated files"
  ansible.builtin.template:
    src: "container_service_files/{{ service.name }}/{{ item.name }}.j2"
    dest: "{{ container_service_basedir }}/{{ service.name }}/{{ item.name }}"
    mode: "{{ item.mode | default(default_file_mode) }}"
    owner: "{{ item.owner | default(operator_user) }}"
    group: "{{ item.group | default(operator_group) }}"
    validate: "{{ item.validate | default(omit) }}"
  loop: "{{ service.templates }}"
  register: "changed_container"
  notify: [ "Stop Service", "Start Service" ]
  when: "service.templates is defined"

- name: "{{ service.name }}: Copy system files"
  ansible.builtin.copy:
    src: "container_service_files/{{ service.name }}/{{ item.name }}"
    dest: "{{ item.dest | mandatory }}"
    mode: "{{ item.mode | default(default_file_mode) }}"
    owner: "{{ item.owner | default(operator_user) }}"
    group: "{{ item.group | default(operator_group) }}"
    validate: "{{ item.validate | default(omit) }}"
  loop: "{{ service.system_files }}"
  when: "service.system_files is defined"
